<?php

namespace AdministrationBundle\Repository;
use Symfony\Component\Validator\Constraints\DateTime;
use UserBundle\Entity\User;

/**
 * DiscountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DiscountRepository extends \Doctrine\ORM\EntityRepository
{
    public function fetchBiggestGeneralDiscount()
    {
        $qb = $this->createQueryBuilder('d');
        $today = new \DateTime();

        $query = $qb
            ->select('d.discount')
            ->leftJoin('d.products', 'p')
            ->where($qb->expr()->lte('d.startDate', ':today'))
            ->andWhere($qb->expr()->gte('d.endDate', ':today'))
            ->andWhere($qb->expr()->isNull('d.category'))
            ->andWhere($qb->expr()->isNull('p.discount'))
            ->andWhere($qb->expr()->isNull('d.cash'))
            ->setParameter('today', $today)
            ->orderBy('d.discount', 'DESC')->setMaxResults(1)
            ->getQuery();

        if($query->getOneOrNullResult() != null){
            return $query->getSingleScalarResult();
        }
            return 0;


    }

    public function fetchCategoriesDiscount()
    {
        $qb = $this->createQueryBuilder('d');
        $today = new \DateTime();

        $qb
            ->select(['MAX(d.discount) as discount', 'c.id'])
            ->join('d.category', 'c')
            ->where($qb->expr()->lte('d.startDate', ':today'))
            ->andWhere($qb->expr()->gte('d.endDate', ':today'))
            ->andWhere($qb->expr()->isNotNull('d.category'))
            ->setParameter(':today', $today)
            ->orderBy('d.discount', 'DESC');

        $results = $qb->getQuery()->getResult();

        $promotions = [];
        foreach ($results as $promotion){
            $promotions[(int)$promotion['id']] = (int)$promotion['discount'];
        }

        return $promotions;
    }

    public function fetchProductsDiscount()
    {
        $qb = $this->createQueryBuilder('d');
        $today = new \DateTime();

        $qb
            ->select(['(d.discount) as discount', 'p.id'])
            ->join('d.products', 'p')
            ->where($qb->expr()->lte('d.startDate', ':today'))
            ->andWhere($qb->expr()->gte('d.endDate', ':today'))
            ->setParameter(':today', $today)
            ->orderBy('d.discount', 'DESC');

        $results = $qb->getQuery()->getResult();
        $promotions = [];
        foreach ($results as $promotion){
            $promotions[(int)$promotion['id']] = (int)$promotion['discount'];
        }
        return $promotions;
    }

    public function fetchUserCashPromotion()
    {
        $qb = $this->createQueryBuilder('d');
        $today = new \DateTime();

         $qb
            ->select(['d.discount', 'u.id'])
            ->join(User::class, 'u')
            ->where($qb->expr()->lte('d.startDate', ':today'))
            ->andWhere($qb->expr()->gte('d.endDate', ':today'))
            ->andWhere($qb->expr()->gt('d.cash', ':cash'))
             ->andWhere($qb->expr()->lt('d.cash', 'u.cash'))
            ->setParameter('cash', 0)
            ->setParameter('today', $today)
            ->orderBy('d.discount', 'DESC');


        $results = $qb->getQuery()->getResult();
        dump($results);
        $promotions = [];
        foreach ($results as $promotion){
            $promotions[(int)$promotion['id']] = (int)$promotion['discount'];
        }
        dump($promotions);
        return $promotions;

    }
}
