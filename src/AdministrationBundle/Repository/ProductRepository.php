<?php

namespace AdministrationBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function findTopSellers()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
            ->where('p.onSale = 1')
            ->andWhere('p.quantity > 0')
            ->andWhere('p.selelr IS NULL')
            ->orderBy('p.sold', 'desc')
            ->setMaxResults(3);

        return $qb->getQuery()->getResult();
    }

    public function findRecentProducts()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')->where('p.onSale = 1')->orderBy('p.createdOn', 'desc')->setMaxResults(4);

        return $qb->getQuery()->getResult();
    }

    public function findPromotion()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')->where('p.onSale = 1')->orderBy('p.discount', 'desc')->setMaxResults(4);

        return $qb->getQuery()->getResult();
    }

    public function findProducts()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
            ->where('p.onSale = 1')
            ->andWhere('p.quantity > 0')
            ->orderBy('p.createdOn', 'desc');

        return $qb->getQuery()->getResult();
    }

    public function findProductsQuery()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
            ->where('p.onSale = 1')
            ->andWhere('p.quantity > 0')
            ->orderBy('p.createdOn', 'desc');
        return $qb;
    }

    public function findUserProductsInShop($user)
    {
        $qb= $this->createQueryBuilder('p');

        $qb
            ->select('p')
            ->where($qb->expr()->eq('p.selelr', ':seller'))
            ->andWhere($qb->expr()->gt('p.quantity', 0))
            ->setParameter('seller', $user);

        return $qb->getQuery()->getResult();
    }

    public function findSoldUserProducts($user)
    {
        $qb= $this->createQueryBuilder('p');

        $qb
            ->select('p')
            ->where($qb->expr()->eq('p.selelr', ':seller'))
            ->andWhere($qb->expr()->eq('p.quantity', 0))
            ->setParameter('seller', $user);

        return $qb->getQuery()->getResult();
    }
}
