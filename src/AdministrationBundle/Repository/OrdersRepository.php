<?php

namespace AdministrationBundle\Repository;

use AdministrationBundle\Entity\Product;
use UserBundle\Entity\User;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends \Doctrine\ORM\EntityRepository
{
    public function findOrders(User $user)
    {
        $qb = $this->createQueryBuilder('o');

        $qb
            ->select('o')
            ->where($qb->expr()->isNull('o.checkout'))
            ->andWhere($qb->expr()->eq('o.deleted', 0))
            ->andwhere($qb->expr()->eq('o.user', ':user'))
            ->setParameter('user', $user);

        return $qb->getQuery()->getResult();
    }

    public function findExistingOrder(Product $product, User $user)
    {
        $qb = $this->createQueryBuilder('o');

        $qb
            ->select('o')
            ->where($qb->expr()->eq('o.user', ':user'))
            ->andWhere($qb->expr()->eq('o.product', ':product'))
            ->andWhere($qb->expr()->eq('o.deleted', 0))
            ->andWhere($qb->expr()->isNull('o.checkout'))
            ->setParameter('user', $user)
            ->setParameter('product', $product);

        return $qb->getQuery()->getResult();
    }

    public function findCompleteOrders(User $user)
    {
        $qb = $this->createQueryBuilder('o');
        $qb
            ->select('o')
            ->where('o.checkout IS NOT NUll')
            ->andWhere($qb->expr()->gt('o.productQuantity', 'o.sellQuantity'))
            ->andWhere('o.user = :usr')
            ->setParameter('usr', $user);

        return $qb->getQuery()->getResult();
    }

    public function findAllOrders()
    {
        $qb = $this->createQueryBuilder('o');
        $qb->select('o')->where('o.checkout IS  NUll');

        return $qb->getQuery()->getResult();
    }

    public function findAllCompleteOrders()
    {
        $qb = $this->createQueryBuilder('o');
        $qb->select('o')->where('o.checkout IS NOT NUll');

        return $qb->getQuery()->getResult();
    }



}
